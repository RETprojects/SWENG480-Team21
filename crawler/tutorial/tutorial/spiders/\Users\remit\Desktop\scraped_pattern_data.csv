id,category_id,name,intent,problem,discussion,structure
2,0,Abstract Factory,"
Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
A hierarchy that encapsulates: many possible ""platforms"", and the construction of a suite of ""products"".
The new operator considered harmful.
","If an application is to be portable, it needs to
encapsulate platform dependencies.  These ""platforms""
might include: windowing system, operating system,
database, etc.  Too often, this encapsulation is not
engineered in advance, and lots of #ifdef case statements
with options for all currently supported platforms begin
to procreate like rabbits throughout the code.","Provide a level of indirection that abstracts the creation
of families of related or dependent objects without directly
specifying their concrete classes.  The ""factory"" object has
the responsibility for providing creation services for the
entire platform family.  Clients never create platform objects
directly, they ask the factory to do that for them.This mechanism makes exchanging product families easy because
the specific class of the factory object appears only once in
the application - where it is instantiated.  The application
can wholesale replace the entire family of products simply by
instantiating a different concrete instance of the abstract
factory.Because the service provided by the factory object is so
pervasive, it is routinely implemented as a Singleton.","The Abstract Factory defines a Factory Method per product.
Each Factory Method encapsulates the new operator
and the concrete, platform-specific, product classes.
Each ""platform"" is then modeled with a Factory derived class.

"
3,0,Abstract Factory,"
Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
A hierarchy that encapsulates: many possible ""platforms"", and the construction of a suite of ""products"".
The new operator considered harmful.
","If an application is to be portable, it needs to
encapsulate platform dependencies.  These ""platforms""
might include: windowing system, operating system,
database, etc.  Too often, this encapsulation is not
engineered in advance, and lots of #ifdef case statements
with options for all currently supported platforms begin
to procreate like rabbits throughout the code.","Provide a level of indirection that abstracts the creation
of families of related or dependent objects without directly
specifying their concrete classes.  The ""factory"" object has
the responsibility for providing creation services for the
entire platform family.  Clients never create platform objects
directly, they ask the factory to do that for them.This mechanism makes exchanging product families easy because
the specific class of the factory object appears only once in
the application - where it is instantiated.  The application
can wholesale replace the entire family of products simply by
instantiating a different concrete instance of the abstract
factory.Because the service provided by the factory object is so
pervasive, it is routinely implemented as a Singleton.","The Abstract Factory defines a Factory Method per product.
Each Factory Method encapsulates the new operator
and the concrete, platform-specific, product classes.
Each ""platform"" is then modeled with a Factory derived class.

"
4,0,Abstract Factory,"
Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
A hierarchy that encapsulates: many possible ""platforms"", and the construction of a suite of ""products"".
The new operator considered harmful.
","If an application is to be portable, it needs to
encapsulate platform dependencies.  These ""platforms""
might include: windowing system, operating system,
database, etc.  Too often, this encapsulation is not
engineered in advance, and lots of #ifdef case statements
with options for all currently supported platforms begin
to procreate like rabbits throughout the code.","Provide a level of indirection that abstracts the creation
of families of related or dependent objects without directly
specifying their concrete classes.  The ""factory"" object has
the responsibility for providing creation services for the
entire platform family.  Clients never create platform objects
directly, they ask the factory to do that for them.This mechanism makes exchanging product families easy because
the specific class of the factory object appears only once in
the application - where it is instantiated.  The application
can wholesale replace the entire family of products simply by
instantiating a different concrete instance of the abstract
factory.Because the service provided by the factory object is so
pervasive, it is routinely implemented as a Singleton.","The Abstract Factory defines a Factory Method per product.
Each Factory Method encapsulates the new operator
and the concrete, platform-specific, product classes.
Each ""platform"" is then modeled with a Factory derived class.

"
